Description: set watchdog timeout time
 设置软看门狗定期器超时时间为原来的1/4，累计4次后超时
Author: guozhijun <guozhijun@uniontech.com>

Origin: https://gerrit.uniontech.com/plugins/gitiles/base/systemd/+/2049a1b0e504139955ededfd0c63b352c276a082
Bug: https://pms.uniontech.com/zentao/bug-view-84726.html
Last-Update: 2022-05-27

--- systemd-250.4.orig/src/core/service.c
+++ systemd-250.4/src/core/service.c
@@ -97,6 +97,8 @@ static int service_dispatch_exec_io(sd_e
 static void service_enter_signal(Service *s, ServiceState state, ServiceResult f);
 static void service_enter_reload_by_notify(Service *s);
 
+const int service_watchdog_maxtimeout = 4;
+
 static void service_init(Unit *u) {
         Service *s = SERVICE(u);
 
@@ -113,6 +115,7 @@ static void service_init(Unit *u) {
         s->socket_fd = -1;
         s->stdin_fd = s->stdout_fd = s->stderr_fd = -1;
         s->guess_main_pid = true;
+	s->watchdog_overtimes = 0;
 
         s->control_command_id = _SERVICE_EXEC_COMMAND_INVALID;
 
@@ -214,7 +217,7 @@ static void service_start_watchdog(Servi
         }
 
         if (s->watchdog_event_source) {
-                r = sd_event_source_set_time(s->watchdog_event_source, usec_add(s->watchdog_timestamp.monotonic, watchdog_usec));
+                r = sd_event_source_set_time(s->watchdog_event_source, usec_add(s->watchdog_timestamp.monotonic, watchdog_usec/service_watchdog_maxtimeout));
                 if (r < 0) {
                         log_unit_warning_errno(UNIT(s), r, "Failed to reset watchdog timer: %m");
                         return;
@@ -226,7 +229,7 @@ static void service_start_watchdog(Servi
                                 UNIT(s)->manager->event,
                                 &s->watchdog_event_source,
                                 CLOCK_MONOTONIC,
-                                usec_add(s->watchdog_timestamp.monotonic, watchdog_usec), 0,
+                                usec_add(s->watchdog_timestamp.monotonic, watchdog_usec/service_watchdog_maxtimeout), 0,
                                 service_dispatch_watchdog, s);
                 if (r < 0) {
                         log_unit_warning_errno(UNIT(s), r, "Failed to add watchdog timer: %m");
@@ -3963,6 +3966,12 @@ static int service_dispatch_watchdog(sd_
         watchdog_usec = service_get_watchdog_usec(s);
 
         if (UNIT(s)->manager->service_watchdogs) {
+                if(s->watchdog_overtimes < service_watchdog_maxtimeout-1){
+                        log_unit_debug(UNIT(s),"watchdog timeout times %d",s->watchdog_overtimes);
+                        s->watchdog_overtimes++;
+                        service_reset_watchdog(s);
+                        return 0;
+                }
                 log_unit_error(UNIT(s), "Watchdog timeout (limit %s)!",
                                FORMAT_TIMESPAN(watchdog_usec, 1));
 
@@ -4166,8 +4175,10 @@ static void service_notify_message(
         /* Interpret WATCHDOG= */
         e = strv_find_startswith(tags, "WATCHDOG=");
         if (e) {
-                if (streq(e, "1"))
+                if (streq(e, "1")) {
+			s->watchdog_overtimes = 0;
                         service_reset_watchdog(s);
+		}
                 else if (streq(e, "trigger"))
                         service_force_watchdog(s);
                 else
--- systemd-250.4.orig/src/core/service.h
+++ systemd-250.4/src/core/service.h
@@ -128,6 +128,7 @@ struct Service {
         usec_t watchdog_original_usec;   /* the watchdog timeout that was in effect when the unit was started, i.e. the timeout the forked off processes currently see */
         usec_t watchdog_override_usec;   /* the watchdog timeout requested by the service itself through sd_notify() */
         bool watchdog_override_enable;
+	int    watchdog_overtimes;
         sd_event_source *watchdog_event_source;
 
         ExecCommand* exec_command[_SERVICE_EXEC_COMMAND_MAX];
